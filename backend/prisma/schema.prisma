// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  price       BigInt
  purchasePrice BigInt?  @default(0)
  sku         String?
  quantity    BigInt
  damagedQuantity BigInt @default(0)
  lowStockThreshold BigInt @default(10)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  SaleItem    SaleItem[]
  BulkPurchaseItem BulkPurchaseItem[]
  SaleReturnItem SaleReturnItem[]

  @@index([userId])
  @@index([userId, name])
  @@index([userId, quantity])
  @@index([userId, createdAt])
}

model Sale {
  id          String     @id @default(uuid())
  billNumber  String     @unique
  totalAmount BigInt
  originalTotalAmount BigInt?
  discount    BigInt     @default(0)
  paidAmount  BigInt     @default(0)
  saleDate    DateTime   @default(now())
  contact     Contact?   @relation(fields: [contactId], references: [id])
  contactId   String?
  employee    Employee?  @relation(fields: [employeeId], references: [id])
  employeeId  String?
  userId      String
  items       SaleItem[]
  returns     SaleReturn[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([userId, saleDate])
  @@index([userId, createdAt])
  @@index([contactId])
  @@index([employeeId])
}

model SaleItem {
  id        String   @id @default(uuid())
  quantity  BigInt
  price     BigInt
  purchasePrice BigInt @default(0)
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  address   String?
  phoneNumber     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  purchases BulkPurchase[]
  sales     Sale[]
  loanTransactions LoanTransaction[]

  @@index([userId])
  @@index([userId, name])
  @@index([phoneNumber])
}

model BulkPurchase {
  id          String     @id @default(uuid())
  invoiceNumber String?   @unique
  totalAmount BigInt
  paidAmount  BigInt
  purchaseDate DateTime   @default(now())
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   String
  userId      String
  items       BulkPurchaseItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([contactId])
}

model BulkPurchaseItem {
  id            String       @id @default(uuid())
  quantity      BigInt
  purchasePrice BigInt
  bulkPurchase  BulkPurchase @relation(fields: [bulkPurchaseId], references: [id])
  bulkPurchaseId String
  product       Product      @relation(fields: [productId], references: [id])
  productId     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model SaleReturn {
  id          String     @id @default(uuid())
  returnNumber String    @unique
  totalAmount BigInt
  returnDate  DateTime   @default(now())
  reason      String?
  refundAmount BigInt    @default(0)
  refundPaid  Boolean    @default(false)
  refundDate  DateTime?
  sale        Sale       @relation(fields: [saleId], references: [id])
  saleId      String
  userId      String
  items       SaleReturnItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([saleId])
}

model SaleReturnItem {
  id           String     @id @default(uuid())
  quantity     BigInt
  price        BigInt
  saleReturn   SaleReturn @relation(fields: [saleReturnId], references: [id])
  saleReturnId String
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model LoanTransaction {
  id          String   @id @default(uuid())
  amount      BigInt
  type        String   // 'GIVEN', 'TAKEN', 'RETURNED_BY_CONTACT', 'RETURNED_TO_CONTACT'
  description String?
  date        DateTime @default(now())
  contact     Contact  @relation(fields: [contactId], references: [id])
  contactId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([contactId])
}

model DriveSettings {
  id                String   @id @default(uuid())
  serviceAccountKey String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model License {
  id                String   @id @default(uuid())
  userId            String   @unique
  licenseKey        String
  deviceFingerprint String
  expiry            BigInt
  activatedAt       DateTime @default(now())
  isTrial           Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  resetOtp  String?
  otpExpiry DateTime?
  role      String?  @default("admin")
  companyName String?
  trialEndDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
}

model ShopSettings {
  id              String   @id @default(uuid())
  email           String
  shopName        String
  shopDescription String?
  shopDescription2 String?
  userName1       String
  userPhone1      String
  userName2       String?
  userPhone2      String?
  userName3       String?
  userPhone3      String?
  brand1          String?
  brand1Registered Boolean  @default(false)
  brand2          String?
  brand2Registered Boolean  @default(false)
  brand3          String?
  brand3Registered Boolean  @default(false)
  logo            String?
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Branch {
  id        String     @id @default(uuid())
  name      String     @unique
  code      String     @unique
  location  String
  userId    String
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model Employee {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  phone       String
  email       String   @unique
  password    String
  permissions String   // JSON string of permissions
  branch      Branch   @relation(fields: [branchId], references: [id])
  branchId    String
  userId      String
  sales       Sale[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([branchId])
}
