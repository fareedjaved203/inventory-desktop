// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       BigInt
  purchasePrice BigInt?  @default(0)
  sku         String?
  quantity    BigInt
  unit        String     @default("pcs")
  damagedQuantity BigInt @default(0)
  lowStockThreshold BigInt @default(10)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  SaleItem    SaleItem[]
  BulkPurchaseItem BulkPurchaseItem[]
  SaleReturnItem SaleReturnItem[]
  
  @@unique([name, userId])
}

model Sale {
  id          String     @id @default(uuid())
  billNumber  String
  totalAmount BigInt
  originalTotalAmount BigInt?
  discount    BigInt     @default(0)
  paidAmount  BigInt     @default(0)
  saleDate    DateTime   @default(now())
  contact     Contact?   @relation(fields: [contactId], references: [id])
  contactId   String?
  employee    Employee?  @relation(fields: [employeeId], references: [id])
  employeeId  String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       SaleItem[]
  returns     SaleReturn[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([billNumber, userId])
}

model SaleItem {
  id        String   @id @default(uuid())
  quantity  BigInt
  price     BigInt
  purchasePrice BigInt @default(0)
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  address   String?
  phoneNumber     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  purchases BulkPurchase[]
  sales     Sale[]
  loanTransactions LoanTransaction[]
}

model BulkPurchase {
  id          String     @id @default(uuid())
  invoiceNumber String?
  totalAmount BigInt
  paidAmount  BigInt
  purchaseDate DateTime   @default(now())
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       BulkPurchaseItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([invoiceNumber, userId])
}

model BulkPurchaseItem {
  id            String       @id @default(uuid())
  quantity      BigInt
  purchasePrice BigInt
  bulkPurchase  BulkPurchase @relation(fields: [bulkPurchaseId], references: [id])
  bulkPurchaseId String
  product       Product      @relation(fields: [productId], references: [id])
  productId     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model SaleReturn {
  id          String     @id @default(uuid())
  returnNumber String    @unique
  totalAmount BigInt
  returnDate  DateTime   @default(now())
  reason      String?
  refundAmount BigInt    @default(0)
  refundPaid  Boolean    @default(false)
  refundDate  DateTime?
  sale        Sale       @relation(fields: [saleId], references: [id])
  saleId      String
  items       SaleReturnItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SaleReturnItem {
  id           String     @id @default(uuid())
  quantity     BigInt
  price        BigInt
  saleReturn   SaleReturn @relation(fields: [saleReturnId], references: [id])
  saleReturnId String
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model LoanTransaction {
  id          String   @id @default(uuid())
  amount      BigInt
  type        String   // 'GIVEN', 'TAKEN', 'RETURNED_BY_CONTACT', 'RETURNED_TO_CONTACT'
  description String?
  date        DateTime @default(now())
  contact     Contact  @relation(fields: [contactId], references: [id])
  contactId   String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DriveSettings {
  id                String   @id @default(uuid())
  serviceAccountKey String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  resetOtp     String?
  otpExpiry    DateTime?
  role         String   @default("admin")
  companyName  String?
  trialEndDate DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  products     Product[]
  sales        Sale[]
  contacts     Contact[]
  bulkPurchases BulkPurchase[]
  loanTransactions LoanTransaction[]
  shopSettings ShopSettings[]
  branches     Branch[]
  employees    Employee[]
  license      License?
}

model ShopSettings {
  id              String   @id @default(uuid())
  email           String
  shopName        String
  shopDescription String?
  shopDescription2 String?
  userName1       String
  userPhone1      String
  userName2       String?
  userPhone2      String?
  userName3       String?
  userPhone3      String?
  brand1          String?
  brand1Registered Boolean  @default(false)
  brand2          String?
  brand2Registered Boolean  @default(false)
  brand3          String?
  brand3Registered Boolean  @default(false)
  logo            String?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Branch {
  id        String     @id @default(uuid())
  name      String
  code      String
  location  String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@unique([name, userId])
  @@unique([code, userId])
}

model Employee {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  phone       String
  email       String
  password    String
  permissions String   // JSON string of permissions
  branch      Branch   @relation(fields: [branchId], references: [id])
  branchId    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales       Sale[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([email, userId])
}

model License {
  id               String   @id @default(uuid())
  licenseKey       String?
  deviceFingerprint String?
  expiry           BigInt?
  activatedAt      DateTime?
  isTrial          Boolean  @default(false)
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
