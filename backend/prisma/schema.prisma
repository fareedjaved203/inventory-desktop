generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Product {
  id                String             @id @default(uuid())
  name              String
  description       String
  price             BigInt?
  purchasePrice     BigInt?            @default(0)
  sku               String?
  quantity          BigInt
  damagedQuantity   BigInt             @default(0)
  lowStockThreshold BigInt             @default(10)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  unit              String             @default("pcs")
  userId            String
  isRawMaterial     Boolean            @default(false)
  retailPrice       BigInt?
  wholesalePrice    BigInt?
  unitValue         Decimal?
  BulkPurchaseItem  BulkPurchaseItem[]
  expenses          Expense[]
  SaleItem          SaleItem[]
  SaleReturnItem    SaleReturnItem[]

  @@unique([userId, name])
  @@index([userId])
  @@index([userId, name])
  @@index([userId, quantity])
  @@index([userId, createdAt])
}

model Sale {
  id                  String       @id @default(uuid())
  billNumber          String       @unique
  totalAmount         BigInt
  originalTotalAmount BigInt?
  discount            BigInt       @default(0)
  paidAmount          BigInt       @default(0)
  saleDate            DateTime     @default(now())
  contactId           String?
  employeeId          String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userId              String
  contact             Contact?     @relation(fields: [contactId], references: [id])
  employee            Employee?    @relation(fields: [employeeId], references: [id])
  items               SaleItem[]
  returns             SaleReturn[]

  @@index([userId])
  @@index([userId, saleDate])
  @@index([userId, createdAt])
  @@index([contactId])
  @@index([employeeId])
}

model SaleItem {
  id            String   @id @default(uuid())
  quantity      BigInt
  price         BigInt
  purchasePrice BigInt   @default(0)
  saleId        String
  productId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  priceType     String   @default("retail")
  product       Product  @relation(fields: [productId], references: [id])
  sale          Sale     @relation(fields: [saleId], references: [id])
}

model Contact {
  id               String            @id @default(uuid())
  name             String
  address          String?
  phoneNumber      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String
  contactType      String            @default("customer")
  purchases        BulkPurchase[]
  expenses         Expense[]
  loanTransactions LoanTransaction[]
  sales            Sale[]

  @@index([userId])
  @@index([userId, name])
  @@index([phoneNumber])
  @@index([userId, contactType])
}

model BulkPurchase {
  id            String             @id @default(uuid())
  invoiceNumber String?            @unique
  totalAmount   BigInt
  paidAmount    BigInt
  purchaseDate  DateTime           @default(now())
  contactId     String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  userId        String
  discount      BigInt             @default(0)
  contact       Contact            @relation(fields: [contactId], references: [id])
  items         BulkPurchaseItem[]

  @@index([userId])
  @@index([contactId])
}

model BulkPurchaseItem {
  id             String       @id @default(uuid())
  quantity       BigInt
  purchasePrice  BigInt
  bulkPurchaseId String
  productId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  bulkPurchase   BulkPurchase @relation(fields: [bulkPurchaseId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])
}

model SaleReturn {
  id           String           @id @default(uuid())
  returnNumber String           @unique
  totalAmount  BigInt
  returnDate   DateTime         @default(now())
  reason       String?
  refundAmount BigInt           @default(0)
  refundPaid   Boolean          @default(false)
  refundDate   DateTime?
  saleId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  userId       String
  sale         Sale             @relation(fields: [saleId], references: [id])
  items        SaleReturnItem[]

  @@index([userId])
  @@index([saleId])
}

model SaleReturnItem {
  id           String     @id @default(uuid())
  quantity     BigInt
  price        BigInt
  saleReturnId String
  productId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  product      Product    @relation(fields: [productId], references: [id])
  saleReturn   SaleReturn @relation(fields: [saleReturnId], references: [id])
}

model LoanTransaction {
  id          String   @id @default(uuid())
  amount      BigInt
  type        String
  description String?
  date        DateTime @default(now())
  contactId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  contact     Contact  @relation(fields: [contactId], references: [id])

  @@index([userId])
  @@index([contactId])
}

model DriveSettings {
  id                String   @id @default(uuid())
  serviceAccountKey String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model License {
  id                String   @id @default(uuid())
  userId            String   @unique
  licenseKey        String
  deviceFingerprint String
  expiry            BigInt
  duration          String?
  activatedAt       DateTime @default(now())
  isTrial           Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  resetOtp     String?
  otpExpiry    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  companyName  String?
  role         String?   @default("admin")
  trialEndDate DateTime?

  @@index([email])
  @@index([role])
}

model ShopSettings {
  id               String   @id @default(uuid())
  email            String
  shopName         String
  shopDescription  String?
  shopDescription2 String?
  userName1        String
  userPhone1       String
  userName2        String?
  userPhone2       String?
  userName3        String?
  userPhone3       String?
  brand1           String?
  brand1Registered Boolean  @default(false)
  brand2           String?
  brand2Registered Boolean  @default(false)
  brand3           String?
  brand3Registered Boolean  @default(false)
  logo             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String

  @@index([userId])
}

model Branch {
  id        String     @id @default(uuid())
  name      String     @unique
  code      String     @unique
  location  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  employees Employee[]

  @@index([userId])
}

model Employee {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  phone       String
  email       String   @unique
  password    String
  permissions String
  branchId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  branch      Branch   @relation(fields: [branchId], references: [id])
  sales       Sale[]

  @@index([userId])
  @@index([email])
  @@index([branchId])
}

model Expense {
  id            String   @id @default(uuid())
  amount        BigInt
  date          DateTime @default(now())
  category      String
  description   String?
  paymentMethod String?
  receiptNumber String?
  contactId     String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  productId     String?
  contact       Contact? @relation(fields: [contactId], references: [id])
  product       Product? @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([userId, date])
  @@index([contactId])
  @@index([productId])
}
